#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#--------------------------------------------------------------------------------------------------
# Program Name:           abbott
# Program Description:    HTTP Server for the CANTUS Database
#
# Filename:               run_tests
# Purpose:                Runs the automated test suite for the Abbott server.
#
# Copyright (C) 2015 Christopher Antila
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#--------------------------------------------------------------------------------------------------
'''
Runs the automated test suite for the Abbott server.
'''

try:
    import abbott
except ImportError:
    import sys
    sys.path.insert(0, '.')
    import abbott

import unittest

def failure_printer(fail_err, test_case, traceback):
    '''
    Print a nice message for every test failure/error.

    :param str fail_err: either 'Failure' or 'Error'
    :param TestCase test_case: the failing :class:`TestCase`
    :param str traceback: traceback from the test
    '''
    print('\n{} in {}:\n{}\n================'.format(fail_err, test_case, traceback))

if __name__ == '__main__':
    suite = unittest.TestLoader().discover('.')
    result = unittest.TestResult()
    suite.run(result)
    if not result.wasSuccessful():
        for case, trace in result.errors:
            failure_printer('Error', case, trace)
        for case, trace in result.failures:
            failure_printer('Failure', case, trace)
        print('\nOverall: {} errors and {} failures\n'.format(len(result.errors),
                                                              len(result.failures)))
