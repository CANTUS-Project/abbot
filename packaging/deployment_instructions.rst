I set up a virtual machine with CentOS 7, with a "minimal install," 1GB of memory, and the following partitions:

/: 10G
/home: 5G
/var: 5G
/var/log: 5G
/var/log/audit: 2G
/usr/local: 5G
swap: 2G

total: 34G

====

I created a user, "compadmin," to use for the system administration tasks.
We will not use the "root" user.
Ensure the "compadmin" user has a good password.
We will disable the "root" user later.

====

After the installation, I logged in as "compadmin" and created the ".ssh" directory:

::
    $ mkdir ~/.ssh
    $ chmod u=rwX,g=-,o=- ~/.ssh

From my own computer, I transferred my RSA public key to the new server:

::
    $ scp ~/.ssh/id_rsa_key.pub new_server:/home/compadmin/.ssh/authorized_keys

New SSH connections should use the RSA public key. We will disable password-based SSH logins later.

====

On the new server VM, I ran a full system update:

::
    $ sudo yum update "rpm*" -y
    ... (you will have to approve the CentOS package-signing key)...
    ... (it should be fast)...
    $ sudo yum update "yum*" -y
    ... (it should be fast)...
    $ sudo yum update -y
    ... (this will not be as fast)...

After the update is finished, restart the VM:

::
    $ sudo systemctl reboot

====

From this point on, everything shall be managed with a collection of Ansible playbooks.
You must install Ansible on your own computer, which will be the "Control Machine": https://docs.ansible.com/ansible/intro_installation.html#installing-the-control-machine

Make an "inventory file" named "hosts" with the new VM.
Change the IP address as required.

::
    abbot ansible_ssh_host=10.0.1.132 ansible_ssh_user=compadmin

Configure SSH
-------------

Before you run this playbook, make sure you have an active SSH session.
This playbook changes SSH settings in ways that may prevent you from connecting again, in which case a previously-running session will be important to help fix the mess!

::
    $ ssh compadmin@new_host
    ... then in a new terminal window...
    $ cd /path/to/ansible/playbooks
    $ ansible-playbook -i hosts configure_ssh.yml
    ... and in the same terminal window...
    $ ssh <<new_vm>>

If you can successfully SSH into the new VM after the playbook has run, you can go ahead and close the other SSH session.
You may need to delete the previous host key, and disable "StrictHostKeyChecking" on the command line for the *first* time you connect to the new VM.

Like all the playbooks for Abbot, it is safe to re-run the "configure_ssh.yml" playbook as many times as you wish.

Set Up Everything Else
----------------------

The rest of the setup doesn't require human intervention. Once you start the setup, you don't even have to watch!

::
    $ ansible-playbook -i hosts abbot.yml

Configuration Variables
-----------------------

You may be interested in changing some of the configuration variables in the ``install_solr.yml`` and especially ``install_abbot.yml`` files.
In particular, you may want to set the "abbot_hostname", "abbot_port", and "abbot_drupal_path" variables in the ``install_abbot.yml`` file, because these affect the resource URLs generated by the server.
Incorrect values here will break any user agent.

To upgrade the version of Abbot, simply change the "abbot_version" variable in ``install_abbot.yml``.
This can either be a branch name, a tag name, or a "committish." The re-run the playbook.

Maintenance
-----------

The Ansible playbooks are designed to be run again, at any time, without causing harm.
Ansible only modifies the target system if it is not already in the desired state.
Thus, running Abbot's playbooks on a system that's already set up will not change the system at all, and running the playbooks on a system that has been changed, or is in an unknown state, will correct the system to the state specified in the playbooks.
